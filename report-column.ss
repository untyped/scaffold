#lang scheme/base

(require "base.ss")

(require srfi/13
         (prefix-in sql- (snooze-in sql/sql-struct))
         (unlib-in symbol))

; Structure types --------------------------------

; (struct symbol string xml boolean (listof (U symbol string)))
(define snooze-report-column%
  (class/cells object/cells% ()
    
    ; (cell symbol)
    ;
    ; A unique (page-wide) identifier for the column.
    ; Used for HTML IDs and sort callbacks.
    (init-cell id #:accessor #:mutator)
    
    ; (cell string)
    ;
    ; The printed name of the column in string format.
    (init-cell string-name #:accessor #:mutator)
    
    ; (cell (U xml #f))
    ;
    ; The printed name of the column in xml format:
    ; the default value of #f causes the default accessor
    ; to return (xml ,(get-string-name)).
    (init-cell xml-name #f #:mutator)
    
    ; (cell (listof (U symbol string)))
    ;
    ; A list of CSS classes to apply to head cells in this column.
    (init-cell classes '(ui-widget-header) #:accessor #:mutator)
    
    ; (cell boolean)
    ;
    ; Should this column be displayed in the HTML version of the report?
    (init-cell display-in-html? #t #:accessor #:mutator)
    
    ; (cell boolean)
    ;
    ; Should this column be displayed in the CSV version of the report?
    (init-cell display-in-csv? #t #:accessor #:mutator)
    
    ; (cell (listof order))
    ;
    ; A sample SQL order statement to use when the report
    ; is sorted by this column in ascending order.
    ;
    ; The reverse order is automatically generated by default
    ; by reversing each component in the sample.
    (init-cell order null #:mutator)
    
    ; Constructor --------------------------------
    
    ; Methods ------------------------------------
    
    ; (U 'asc 'desc) -> (listof order)
    (define/public (get-order dir)
      (if (eq? dir 'asc)
          (web-cell-ref order-cell)
          (reverse-order (web-cell-ref order-cell))))
    
    ; -> boolean
    (define/public (get-sortable?)
      (and (pair? (get-order 'asc)) #t))
    
    ; -> symbol
    (define/public (get-sort-id)
      (and (pair? (get-order 'asc))
           (symbol-append (get-id) '-sort)))
    
    ; -> xml
    (define/public (get-xml-name)
      (or (web-cell-ref xml-name-cell)
          (xml ,(get-string-name))))
    
    ; seed -> xml
    (define/public (render-col-tag seed)
      (xml (col (@ [classes ,(format-classes (get-classes))]))))
    
    ; seed (U 'asc 'desc #f) -> xml
    (define/public (render-head seed sort-dir)
      (let* ([id        (get-id)]                      ; symbol
             [classes   (get-classes)]                 ; (listof (U symbol string))
             [sortable? (get-sortable?)]               ; boolean
             [sort-id   (and sortable? (get-sort-id))] ; (U symbol #f)
             [title     (and sortable?                 ; (U string #f)
                             (case sort-dir
                               [(asc)  "Click to sort by this column; currently in ascending order."]
                               [(desc) "Click to sort by this column; currently in descending order."]
                               [else   "Click to sort by this column."]))])
        (xml (th (@ [class ,(if sortable? 
                                (case sort-dir
                                  [(asc)  (format-classes (list* 'sort 'asc 'ui-state-active classes))]
                                  [(desc) (format-classes (list* 'sort 'desc 'ui-state-active classes))]
                                  [(#f)   (format-classes (list* 'sort 'ui-state-default classes))])
                                (format-classes (list* 'not-sortable 'ui-state-default classes)))])
                 ,(if sortable?
                      (xml (a (@ ,(opt-xml-attr sort-id id sort-id)
                                 [title ,title])
                              ; optional sorting arrows
                              ,(opt-xml sortable?
                                 (span (@ [class ,(case sort-dir
                                                    [(asc)  "sort-icon ui-icon ui-icon-triangle-1-n"]
                                                    [(desc) "sort-icon ui-icon ui-icon-triangle-1-s"]
                                                    [(#f)   "sort-icon ui-icon ui-icon-carat-2-n-s"])])))
                              ,(get-xml-name)))
                      (xml (span (@ [class 'not-sortable])
                                 ,(get-xml-name))))))))
    
    (define/public (render-head/csv)
      (csv:cell (get-string-name)))))

; Procedures -------------------------------------

;  symbol
;  string
;  (U (listof order) #f)
;  [#:xml-name         xml] 
;  [#:classes          (listof (U symbol string))]
;  [#:display-in-html? boolean]
;  [#:display-in-csv?  boolean]
; ->
;  column
(define (make-column id 
                     string-name
                     [order #f]
                     #:xml-name         [xml-name         (xml ,string-name)] 
                     #:classes          [classes          null]
                     #:display-in-html? [display-in-html? #t]
                     #:display-in-csv?  [display-in-csv?  #t])
  (new snooze-report-column%
       [id               id]
       [string-name      string-name]
       [xml-name         xml-name]
       [classes          classes]
       [display-in-html? display-in-html?]
       [display-in-csv?  display-in-csv?]
       [order            (or order null)]))

; Helpers ----------------------------------------

; (listof (U string symbol)) -> string
(define (format-classes classes)
  (string-join (map (cut format "~a" <>) classes) " "))

; (listof order) -> (listof order)
(define (reverse-order order)
  (for/list ([order (in-list order)])
    (sql-make-order (sql-order-expression order)
                    (if (eq? (sql-order-direction order) 'asc)
                        'desc
                        'asc))))

; Provide statements -----------------------------

(provide/contract
 [snooze-report-column% class?]
 [make-column           (->* (symbol? string?) 
                             ((or/c (listof sql-order?) false/c)
                              #:xml-name xml?
                              #:classes         (listof (or/c symbol? string?))
                              #:display-in-html? boolean?
                              #:display-in-csv? boolean?) 
                             (is-a?/c snooze-report-column%))])
